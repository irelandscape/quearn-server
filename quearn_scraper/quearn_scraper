#!/usr/bin/env python3

import logging
import logging.handlers
import http.client
import pathlib
import sys
import json
import urllib
import dateparser
import re
from beem import discussions
from beem import blockchain
from beem.comment import Comment
from datetime import datetime

QUEARN_REST_API_URL = '127.0.0.1:8001'
QUEARN_REST_API_PATH = '/api'
QUEARN_REST_API_USE_HTTPS = False

class Scraper :
  def __init__ (self,
                logger,
                rest_api_url,
                rest_api_path,
                rest_api_use_https) :

    self.logger = logger
    self.rest_api_url = rest_api_url
    self.rest_api_path = rest_api_path
    self.rest_api_use_https = rest_api_use_https

    self._get_config()
    self._get_scraper()
    self._get_latest_activity()
    self.current_node = self.nodes[0]

  def _update_block_nbr (self, block_nbr) :
      self._patch('scrapers',
        self.scraper['id'],
        {
          'block_nbr': block_nbr
        })

  def run (self) :
    re_question = re.compile('^(?!A *:).*\?$')
    re_answer = re.compile('^ *A *:.*')

    chain = blockchain.Blockchain()
    for op in chain.stream(opNames = ['comment'],
                           start = self.scraper['block_nbr'],
                           threading = True,
                           thread_num = 8) :
      try :
        json_metadata = json.loads(op['json_metadata'])
        while type(json_metadata) == str :
          # Issue with beem?
          json_metadata = json.loads(json_metadata)
      except:
        self._update_block_nbr(op['block_num'])
        continue

      if json_metadata is None or 'tags' not in json_metadata :
        self._update_block_nbr(op['block_num'])
        continue

      tags = json_metadata['tags']

      if self.config['tag'] not in tags :
        self._update_block_nbr(op['block_num'])
        continue

      title = op['title'].strip()
      if re_question.match(title) :
        mo = 'questions'
      elif re_answer.match(title) :
        mo = 'answers'
      else :
        self._update_block_nbr(op['block_num'])
        continue

      self.logger.debug('Processing {} / {}'.format(op['author'], op['permlink']))
      post = Comment("@{}/{}".format(op['author'], op['permlink']))

      active = post['created'].isoformat()
      if 'active' in post :
          active = post['active'].isoformat()
      params = {
        'created': post['created'].isoformat(),
        'author': post.author,
        'title': title,
        'permlink': post.permlink,
        'active': active,
        'tag1': tags[0],
        'net_votes': len(post.get_votes()),
        'author_payout_value': post.get_author_rewards()['total_payout_SBD'].amount,
        'total_payout_value': post.get_rewards()['total_payout'].amount,
      }
      if len(tags) > 1 :
        params['tag2'] = tags[1]
      if len(tags) > 2 :
        params['tag3'] = tags[2]
      if len(tags) > 3 :
        params['tag4'] = tags[3]
      if len(tags) > 4 :
        params['tag5'] = tags[4]

      rc = self._put(mo,
        params,
        {
          'author': post.author,
          'permlink': post.permlink
        })
      if rc >= 200 and rc <= 299 :
        self._update_block_nbr(op['block_num'])
      else :
        self.logger.error('Failed to post question for {} / {}'.format(post.author, post.permlink))

  def _get_config (self) :
    rc, self.config = self._get('configs')
    if rc != 200 :
      sys.exit(-1)

    self.config = self.config[0]

  def _get_scraper (self) :
    rc, self.scraper = self._get('scrapers')
    if rc != 200 :
      return rc

    self.scraper = self.scraper[0]
    self.nodes = self.scraper['nodes'].split(',')

  def _get_latest_activity (self) :
    rc, q_activity = self._get('questions',
      filters = {
        'ordering': '-active',
        'limit': 1
      })
    if rc != 200 :
      sys.exit(-1)

    activity = None
    if len(q_activity['results']) > 0 :
      activity = dateparser.parse(q_activity['results'][0]['active'])

    rc, a_activity = self._get('answers',
      filters = {
        'ordering': '-active',
        'limit': 1
      })
    if rc != 200 :
      sys.exit(-1)

    activity2 = None
    if len(a_activity['results']) > 0 :
      activity2 = dateparser.parse(a_activity['results'][0]['active'])

    if activity == None :
      self.latest_activity = activity2
    elif activity2 == None :
      self.latest_activity = activity
    else :
      self.latest_activity = min(activity, activity2)

  def _get (self, mo, filters = None) :
    if self.rest_api_use_https :
      rest_conn = http.client.HTTPSConnection(self.rest_api_url, timeout = 5)
    else :
      rest_conn = http.client.HTTPConnection(self.rest_api_url, timeout = 5)
    if filters :
      rest_conn.request('GET', 
                        '{}/{}/?{}'.format(self.rest_api_path, mo, urllib.parse.urlencode(filters)))
    else :
      rest_conn.request('GET', '{}/{}/'.format(self.rest_api_path, mo))
    response = rest_conn.getresponse()
    data = response.read().decode('utf-8')
    if response.status != 200 :
      self.logger.error('Failed to retrieve {} from server. Got status {}'.format(mo, response.status))
    return response.status, json.loads(data)

  def _put (self, mo, params, filters = None) :
    if self.rest_api_use_https :
      rest_conn = http.client.HTTPSConnection(self.rest_api_url, timeout = 5)
    else :
      rest_conn = http.client.HTTPConnection(self.rest_api_url, timeout = 5)

    headers = {'Content-type': 'application/json'}
    if filters :
      rest_conn.request('PUT', 
                        '{}/{}/?{}'.format(self.rest_api_path, mo, urllib.parse.urlencode(filters)),
                        json.dumps(params),
                        headers)
    else :
      rest_conn.request('PUT', 
                        '{}/{}/'.format(self.rest_api_path, mo),
                        json.dumps(params),
                        headers)

    response = rest_conn.getresponse()
    if response.status != 200 :
      self.logger.error('Failed to complete PUT request. Got status {}'.format(response.status))
      if filters : 
          self.logger.error('/{}/?{}'.format(mo, urllib.parse.urlencode(filters)))
      else :
          self.logger.error('/{}/'.format(mo))
      self.logger.error(json.dumps(params))

    return response.status

  def _patch (self, mo, pk, params) :
    if self.rest_api_use_https :
      rest_conn = http.client.HTTPSConnection(self.rest_api_url, timeout = 5)
    else :
      rest_conn = http.client.HTTPConnection(self.rest_api_url, timeout = 5)

    headers = {'Content-type': 'application/json'}
    rest_conn.request('PATCH', 
                      '{}/{}/{}/'.format(self.rest_api_path, mo, pk),
                      json.dumps(params),
                      headers)

    response = rest_conn.getresponse()
    if response.status != 200 :
      self.logger.error('Failed to complete POST request. Got status {}'.format(response.status))

if __name__ == '__main__' :
  logger = logging.getLogger(sys.argv[0])
  logger.setLevel(logging.DEBUG)

  handler = logging.handlers.SysLogHandler(address='/dev/log')

  formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
  handler.setFormatter(formatter)
  logger.addHandler(handler)

  logger.info('STARTING')

  #try :
  #  scraper = Scraper(logger,
  #                    QUEARN_REST_API_URL,
  #                    QUEARN_REST_API_USE_HTTPS)
  #  scraper.run()
  #except :
  #  logger.exception('EXCEPTION:')
  scraper = Scraper(logger,
                    QUEARN_REST_API_URL,
                    QUEARN_REST_API_PATH,
                    QUEARN_REST_API_USE_HTTPS)
  scraper.run()
